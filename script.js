var attack_types=["physical","magic","fire","lightning","holy"],attack_sources=["str","dex","int","fai","arc"];function IF(a,b,e){return a?b:e}function ADD(a,b){return a+b}function MINUS(a,b){return a-b}function MULTIPLY(a,b){return a*b}function DIVIDE(a,b){return a/b}function POW(a,b){return a**b}
var attribute_curves={0:function(a){return IF(80<a,ADD(90,MULTIPLY(20,DIVIDE(a-80,70))),IF(60<a,ADD(75,MULTIPLY(15,DIVIDE(a-60,20))),IF(18<a,ADD(25,MULTIPLY(50,MINUS(1,POW(MINUS(1,DIVIDE(a-18,42)),1.2)))),MULTIPLY(25,POW(DIVIDE(a-1,17),1.2)))))},1:function(a){return IF(80<a,ADD(90,MULTIPLY(20,DIVIDE(a-80,70))),IF(60<a,ADD(75,MULTIPLY(15,DIVIDE(a-60,20))),IF(20<a,ADD(35,MULTIPLY(40,MINUS(1,POW(MINUS(1,DIVIDE(a-20,40)),1.2)))),MULTIPLY(35,POW(DIVIDE(a-1,19),1.2)))))},2:function(a){return IF(80<a,ADD(90,
MULTIPLY(20,DIVIDE(a-80,70))),IF(60<a,ADD(75,MULTIPLY(15,DIVIDE(a-60,20))),IF(20<a,ADD(35,MULTIPLY(40,MINUS(1,POW(MINUS(1,DIVIDE(a-20,40)),1.2)))),MULTIPLY(35,POW(DIVIDE(a-1,19),1.2)))))},4:function(a){return IF(80<a,ADD(95,MULTIPLY(5,DIVIDE(a-80,19))),IF(50<a,ADD(80,MULTIPLY(15,DIVIDE(a-50,30))),IF(20<a,ADD(40,MULTIPLY(40,DIVIDE(a-20,30))),MULTIPLY(40,DIVIDE(a-1,19)))))},7:function(a){return IF(80<a,ADD(90,MULTIPLY(20,DIVIDE(a-80,70))),IF(60<a,ADD(75,MULTIPLY(15,DIVIDE(a-60,20))),IF(20<a,ADD(35,
MULTIPLY(40,MINUS(1,POW(MINUS(1,DIVIDE(a-20,40)),1.2)))),MULTIPLY(35,POW(DIVIDE(a-1,19),1.2)))))},8:function(a){return IF(80<a,ADD(90,MULTIPLY(20,DIVIDE(a-80,70))),IF(60<a,ADD(75,MULTIPLY(15,DIVIDE(a-60,20))),IF(16<a,ADD(25,MULTIPLY(50,MINUS(1,POW(MINUS(1,DIVIDE(a-16,44)),1.2)))),MULTIPLY(25,POW(DIVIDE(a-1,15),1.2)))))},12:function(a){return IF(45<a,ADD(75,MULTIPLY(25,DIVIDE(a-45,54))),IF(30<a,ADD(55,MULTIPLY(20,DIVIDE(a-30,15))),IF(15<a,ADD(10,MULTIPLY(45,DIVIDE(a-15,15))),MULTIPLY(10,DIVIDE(a-1,
14)))))},14:function(a){return IF(80<a,ADD(85,MULTIPLY(15,DIVIDE(a-80,19))),IF(40<a,ADD(60,MULTIPLY(25,DIVIDE(a-40,40))),IF(20<a,ADD(40,MULTIPLY(20,DIVIDE(a-20,20))),MULTIPLY(40,DIVIDE(a-1,19)))))},15:function(a){return IF(80<a,ADD(95,MULTIPLY(5,DIVIDE(a-80,19))),IF(60<a,ADD(65,MULTIPLY(30,DIVIDE(a-60,20))),IF(25<a,ADD(25,MULTIPLY(40,DIVIDE(a-25,35))),MULTIPLY(25,DIVIDE(a-1,24)))))},16:function(a){return IF(80<a,ADD(90,MULTIPLY(10,DIVIDE(a-80,19))),IF(60<a,ADD(75,MULTIPLY(15,DIVIDE(a-60,20))),IF(18<
a,ADD(20,MULTIPLY(55,DIVIDE(a-18,42))),MULTIPLY(20,DIVIDE(a-1,17)))))}};function DAMAGE_FORMULA(a,b,e){return(b>8*a?.1*a:b>a?a*(19.2/49*(a/b-.125)**2+.1):b>.4*a?a*(-.4/3*(a/b-2.5)**2+.7):b>.125*a?a*(-.8/121*(a/b-8)**2+.9):.9*a)*e}
function optimize_weapon_and_attributes(a,b,e){var d=weapons.filter(m=>e.every(n=>n(m))),c=!1,f=0,h=0,k;for(k of d){var g=get_locked_attribute_distribution(k,a,b);if(g){var l=get_initial_attribute_distribution(g,b+Object.values(a).reduce((m,n)=>m+n)-Object.values(g).reduce((m,n)=>m+n));[g,l]=CSPSolver(damage_objective,{weapon:k,attrs:l},attr_generator,get_attr_contraints(g))}else{if(must_have_required_attributes)continue;if(!c){var q=get_attribute_combinations(a,b);c=!0}g=get_weapon_attribute_states(k,
q);[g,l]=brute_solver(damage_objective,g)}status_update(++f/d.length);if(g>h){h=g;var p=l}}return 0==h?null:{damage:Math.floor(h),weapon:beautify_weapon_stats(p.weapon,p.attrs),attributes:p.attrs}}function get_locked_attribute_distribution(a,b,e){var d={},c=Math.max((is_two_handing?Math.ceil(parseInt(a.required_str)/1.5):parseInt(a.required_str))-b.str,0);d.str=b.str+c;e-=c;attack_sources.slice(1).forEach(f=>{c=Math.max(parseInt(a["required_"+f])-b[f],0);d[f]=b[f]+c;e-=c});return 0<=e?d:null}
function beautify_weapon_stats(a,b){b=getAttackPower(a,b);var e=attack_types.map(c=>({[c]:parseFloat(a["max_base_"+c+"_attack_power"])})).reduce((c,f)=>Object.assign(c,f),{}),d=Object.entries(b).map(([c,f])=>({[c]:f-e[c]})).reduce((c,f)=>Object.assign(c,f),{});return{name:a.name,base_weapon_name:a.base_weapon_name,affinity:a.affinity,weight:a.weight,weapon_type:a.weapon_type,dual_wieldable:a.dual_wieldable,required_str:a.required_str,required_dex:a.required_dex,required_int:a.required_int,required_fai:a.required_fai,
required_arc:a.required_arc,str_scaling_grade:getScalingGrade(a.max_str_scaling),dex_scaling_grade:getScalingGrade(a.max_dex_scaling),int_scaling_grade:getScalingGrade(a.max_int_scaling),fai_scaling_grade:getScalingGrade(a.max_fai_scaling),arc_scaling_grade:getScalingGrade(a.max_arc_scaling),physical_damage_types:a.physical_damage_types,base_attack_power:Object.entries(e).map(([c,f])=>({[c]:f.toFixed(1)})).reduce((c,f)=>Object.assign(c,f),{}),bonus_attack_power:Object.entries(d).map(([c,f])=>({[c]:f.toFixed(1)})).reduce((c,
f)=>Object.assign(c,f),{}),attack_power:Object.entries(b).map(([c,f])=>({[c]:f.toFixed(1)})).reduce((c,f)=>Object.assign(c,f),{}),scarlet_rot:a.max_base_scarlet_rot,madness:a.max_base_madness,sleep:a.max_base_sleep,frostbite:a.max_base_frostbite,poison:a.max_base_poison,bleed:a.max_base_bleed}}function getScalingGrade(a){a=parseFloat(a);return 1.75<a?"S":1.4<=a?"A":.9<=a?"B":.6<=a?"C":.25<=a?"D":0<a?"E":"-"}
function get_attributes_needed_to_wield(a,b){var e=0+Math.max((is_two_handing?Math.ceil(parseInt(a.required_str)/1.5):parseInt(a.required_str))-b.str,0);for(var d in b.slice(1))e+=Math.max(parseInt(a["required_"+d])-b[d],0);return e}function get_initial_attribute_distribution(a,b){var e={};attack_sources.forEach(d=>{var c=Math.min(99-a[d],b);e[d]=a[d]+c;b-=c});return e}
function get_weapon_attribute_states(a,b){var e={weapon:a,attrs:b};e[Symbol.iterator]=function(){var d=e.attrs[Symbol.iterator]();return{next:function(){var c=d.next();return{done:c.done,value:{weapon:a,attrs:c.value}}}}};return e}function status_update(a){}function print_damage_weapon_attributes(a,b){console.log(a,b.weapon.name,JSON.stringify(b.attrs))}function damage_objective(a){return Object.values(get_damage(a.weapon,a.attrs,enemy,a.weapon.physical_damage_types[0])).reduce((b,e)=>b+e)}
function attr_generator(a){var b=[],e;for(e of attack_sources)for(var d of attack_sources)if(d!=e){var c={str:a.attrs.str,dex:a.attrs.dex,"int":a.attrs["int"],fai:a.attrs.fai,arc:a.attrs.arc};c[e]--;c[d]++;b.push({weapon:a.weapon,attrs:c})}return b}
function get_attr_contraints(a){return[b=>99>=b.attrs.str,b=>99>=b.attrs.dex,b=>99>=b.attrs["int"],b=>99>=b.attrs.fai,b=>99>=b.attrs.arc,b=>b.attrs.str>=a.str,b=>b.attrs.dex>=a.dex,b=>b.attrs["int"]>=a["int"],b=>b.attrs.fai>=a.fai,b=>b.attrs.arc>=a.arc]}function CSPSolver(a,b,e,d){var c=b,f=a(b);do{b=c;c=null;for(var h of e(b))if(d.every(g=>g(h))){var k=a(h);k>f&&(f=k,c=h)}}while(c);return[f,b]}
function brute_solver(a,b){var e=b[Symbol.iterator]().next().value,d=a(e),c;for(c of b)b=a(c),b>d&&(d=b,e=c);return[d,e]}function get_damage(a,b,e,d){a=getAttackPower(a,b);return Object.entries(a).map(([c,f])=>({[c]:getTypeDamage(c,f,d,e)})).reduce((c,f)=>Object.assign(c,f),{})}function getTypeDamage(a,b,e,d){var c=100*parseFloat(d[capitalize(a)+" Defense"]);a=parseFloat("physical"==a?d[capitalize(e)]:d[capitalize(a)]);return DAMAGE_FORMULA(b,c,a)}
function capitalize(a){return a.charAt(0).toUpperCase()+a.slice(1)}function sum(a,b){return a+b}function getAttackPower(a,b){var e={};attack_types.forEach(d=>e[d]=parseFloat(a["max_base_"+d+"_attack_power"])+getMaxBonusAttackPower(a,d,b));return e}function getMaxBonusAttackPower(a,b,e){return attack_sources.every(d=>meetsRequirement(a,b,e,d))?attack_sources.map(d=>getAttackPowerPerSource(a,b,e,d)).reduce((d,c)=>d+c):-.4*parseFloat(a["max_base_"+b+"_attack_power"])}
function meetsRequirement(a,b,e,d){return"str"==d?!canScale(a,b,d)||e[d]>=(is_two_handing?Math.ceil(parseInt(a.required_str)/1.5):parseInt(a.required_str)):!canScale(a,b,d)||e[d]>=parseInt(a["required_"+d])}
function getAttackPowerPerSource(a,b,e,d){if(!canScale(a,b,d))return 0;var c=e[d];is_two_handing&&"str"==d&&(c*=1.5);e=parseFloat(a["max_base_"+b+"_attack_power"]);d=parseFloat(a["max_"+d+"_scaling"]);a=parseInt(a[b+"_damage_calculation_id"]);a=parseFloat(attribute_curves[a](c))/100;return e*d*a}function canScale(a,b,e){return attack_element_scaling[a.attack_element_scaling_id][b+"_"+e+"_element_scaling"]}
function get_attribute_combinations(a,b){for(var e=[],d=a.str;d<=Math.min(99,a.str+b);d++)for(var c=a.dex;c<=Math.min(99,a.dex+b);c++)for(var f=a["int"];f<=Math.min(99,a["int"]+b);f++)for(var h=a.fai;h<=Math.min(99,a.fai+b);h++)for(var k=a.arc;k<=Math.min(99,a.arc+b);k++)d+c+f+h+k==b+Object.values(a).reduce((g,l)=>g+l)&&e.push({str:d,dex:c,"int":f,fai:h,arc:k});return e};
