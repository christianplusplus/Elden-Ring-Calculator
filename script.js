var class_stats={hero:{lvl:7,vig:14,min:9,end:12,str:16,dex:9,"int":7,fai:8,arc:11},bandit:{lvl:5,vig:10,min:11,end:10,str:9,dex:13,"int":9,fai:8,arc:14},astrologer:{lvl:6,vig:9,min:15,end:9,str:8,dex:12,"int":16,fai:7,arc:9},warrior:{lvl:8,vig:11,min:12,end:11,str:10,dex:16,"int":10,fai:8,arc:9},prisoner:{lvl:9,vig:11,min:12,end:11,str:11,dex:14,"int":14,fai:6,arc:9},confessor:{lvl:10,vig:10,min:13,end:10,str:12,dex:12,"int":9,fai:14,arc:9},wretch:{lvl:1,vig:10,min:10,end:10,str:10,dex:10,"int":10,
fai:10,arc:10},vagabond:{lvl:9,vig:15,min:10,end:11,str:14,dex:13,"int":9,fai:9,arc:7},prophet:{lvl:7,vig:10,min:14,end:8,str:11,dex:10,"int":7,fai:16,arc:10},samurai:{lvl:9,vig:12,min:11,end:13,str:12,dex:15,"int":9,fai:8,arc:8}};function get_attack_stats(a){return{str:a.str,dex:a.dex,"int":a["int"],fai:a.fai,arc:a.arc}}var must_have_required_attributes=!1,is_two_handing=!1,enemy,attack_types=["physical","magic","fire","lightning","holy"],attack_sources=["str","dex","int","fai","arc"];
function IF(a,b,d){return a?b:d}function ADD(a,b){return a+b}function MINUS(a,b){return a-b}function MULTIPLY(a,b){return a*b}function DIVIDE(a,b){return a/b}function POW(a,b){return a**b}
var attribute_curves={0:function(a){return IF(80<a,ADD(90,MULTIPLY(20,DIVIDE(a-80,70))),IF(60<a,ADD(75,MULTIPLY(15,DIVIDE(a-60,20))),IF(18<a,ADD(25,MULTIPLY(50,MINUS(1,POW(MINUS(1,DIVIDE(a-18,42)),1.2)))),MULTIPLY(25,POW(DIVIDE(a-1,17),1.2)))))},1:function(a){return IF(80<a,ADD(90,MULTIPLY(20,DIVIDE(a-80,70))),IF(60<a,ADD(75,MULTIPLY(15,DIVIDE(a-60,20))),IF(20<a,ADD(35,MULTIPLY(40,MINUS(1,POW(MINUS(1,DIVIDE(a-20,40)),1.2)))),MULTIPLY(35,POW(DIVIDE(a-1,19),1.2)))))},2:function(a){return IF(80<a,ADD(90,
MULTIPLY(20,DIVIDE(a-80,70))),IF(60<a,ADD(75,MULTIPLY(15,DIVIDE(a-60,20))),IF(20<a,ADD(35,MULTIPLY(40,MINUS(1,POW(MINUS(1,DIVIDE(a-20,40)),1.2)))),MULTIPLY(35,POW(DIVIDE(a-1,19),1.2)))))},4:function(a){return IF(80<a,ADD(95,MULTIPLY(5,DIVIDE(a-80,19))),IF(50<a,ADD(80,MULTIPLY(15,DIVIDE(a-50,30))),IF(20<a,ADD(40,MULTIPLY(40,DIVIDE(a-20,30))),MULTIPLY(40,DIVIDE(a-1,19)))))},7:function(a){return IF(80<a,ADD(90,MULTIPLY(20,DIVIDE(a-80,70))),IF(60<a,ADD(75,MULTIPLY(15,DIVIDE(a-60,20))),IF(20<a,ADD(35,
MULTIPLY(40,MINUS(1,POW(MINUS(1,DIVIDE(a-20,40)),1.2)))),MULTIPLY(35,POW(DIVIDE(a-1,19),1.2)))))},8:function(a){return IF(80<a,ADD(90,MULTIPLY(20,DIVIDE(a-80,70))),IF(60<a,ADD(75,MULTIPLY(15,DIVIDE(a-60,20))),IF(16<a,ADD(25,MULTIPLY(50,MINUS(1,POW(MINUS(1,DIVIDE(a-16,44)),1.2)))),MULTIPLY(25,POW(DIVIDE(a-1,15),1.2)))))},12:function(a){return IF(45<a,ADD(75,MULTIPLY(25,DIVIDE(a-45,54))),IF(30<a,ADD(55,MULTIPLY(20,DIVIDE(a-30,15))),IF(15<a,ADD(10,MULTIPLY(45,DIVIDE(a-15,15))),MULTIPLY(10,DIVIDE(a-1,
14)))))},14:function(a){return IF(80<a,ADD(85,MULTIPLY(15,DIVIDE(a-80,19))),IF(40<a,ADD(60,MULTIPLY(25,DIVIDE(a-40,40))),IF(20<a,ADD(40,MULTIPLY(20,DIVIDE(a-20,20))),MULTIPLY(40,DIVIDE(a-1,19)))))},15:function(a){return IF(80<a,ADD(95,MULTIPLY(5,DIVIDE(a-80,19))),IF(60<a,ADD(65,MULTIPLY(30,DIVIDE(a-60,20))),IF(25<a,ADD(25,MULTIPLY(40,DIVIDE(a-25,35))),MULTIPLY(25,DIVIDE(a-1,24)))))},16:function(a){return IF(80<a,ADD(90,MULTIPLY(10,DIVIDE(a-80,19))),IF(60<a,ADD(75,MULTIPLY(15,DIVIDE(a-60,20))),IF(18<
a,ADD(20,MULTIPLY(55,DIVIDE(a-18,42))),MULTIPLY(20,DIVIDE(a-1,17)))))}};function DAMAGE_FORMULA(a,b,d){return(b>8*a?.1*a:b>a?a*(19.2/49*(a/b-.125)**2+.1):b>.4*a?a*(-.4/3*(a/b-2.5)**2+.7):b>.125*a?a*(-.8/121*(a/b-8)**2+.9):.9*a)*d}
function optimize_weapon_and_attributes(a,b,d){var c=Array.from(weapons.values()).filter(l=>d.every(m=>m(l))),e=!1,f=0,g;for(g of c){c=get_locked_attribute_distribution(g,a,b);if(c){var h=get_initial_attribute_distribution(c,b+Object.values(a).reduce((l,m)=>l+m)-Object.values(c).reduce((l,m)=>l+m));[c,h]=CSPSolver(damage_objective,{weapon:g,attrs:h},attr_generator,get_attr_contraints(c))}else{if(must_have_required_attributes){console.log("Couldn't wield "+g.name+"!");continue}if(!e){var k=get_attribute_combinations(a,
b);e=!0}c=get_weapon_attribute_states(g,k);[c,h]=brute_solver(damage_objective,c)}print_damage_weapon_attributes(c,h);if(c>f){f=c;var n=h}}return 0==f?null:[f,n.weapon,n.attrs]}function get_locked_attribute_distribution(a,b,d){var c={},e=Math.max((is_two_handing?Math.ceil(parseInt(a.required_str)/1.5):parseInt(a.required_str))-b.str,0);c.str=b.str+e;d-=e;attack_sources.slice(1).forEach(f=>{e=Math.max(parseInt(a["required_"+f])-b[f],0);c[f]=b[f]+e;d-=e});return 0<=d?c:null}
function get_attributes_needed_to_wield(a,b){var d=0+Math.max((is_two_handing?Math.ceil(parseInt(a.required_str)/1.5):parseInt(a.required_str))-b.str,0);for(var c in b.slice(1))d+=Math.max(parseInt(a["required_"+c])-b[c],0);return d}function get_initial_attribute_distribution(a,b){var d={};attack_sources.forEach(c=>{var e=Math.min(99-a[c],b);d[c]=a[c]+e;b-=e});return d}
function get_weapon_attribute_states(a,b){var d={weapon:a,attrs:b};d[Symbol.iterator]=function(){var c=d.attrs[Symbol.iterator]();return{next:function(){var e=c.next();return{done:e.done,value:{weapon:a,attrs:e.value}}}}};return d}function print_damage_weapon_attributes(a,b){console.log(a,b.weapon.name,JSON.stringify(b.attrs))}function damage_objective(a){return get_damage(a.weapon,a.attrs,enemy,a.weapon.physical_damage_types[0])}
function attr_generator(a){var b=[],d;for(d of attack_sources)for(var c of attack_sources)if(c!=d){var e={str:a.attrs.str,dex:a.attrs.dex,"int":a.attrs["int"],fai:a.attrs.fai,arc:a.attrs.arc};e[d]--;e[c]++;b.push({weapon:a.weapon,attrs:e})}return b}
function get_attr_contraints(a){return[b=>99>=b.attrs.str,b=>99>=b.attrs.dex,b=>99>=b.attrs["int"],b=>99>=b.attrs.fai,b=>99>=b.attrs.arc,b=>b.attrs.str>=a.str,b=>b.attrs.dex>=a.dex,b=>b.attrs["int"]>=a["int"],b=>b.attrs.fai>=a.fai,b=>b.attrs.arc>=a.arc]}function CSPSolver(a,b,d,c){var e=b,f=a(b);do{b=e;e=null;for(var g of d(b))if(c.every(k=>k(g))){var h=a(g);h>f&&(f=h,e=g)}}while(e);return[f,b]}
function brute_solver(a,b){var d=b[Symbol.iterator]().next().value,c=a(d),e;for(e of b)b=a(e),b>c&&(c=b,d=e);return[c,d]}function get_damage(a,b,d,c){a=getAttackPower(a,b);return Object.entries(a).map(([e,f])=>getTypeDamage(e,f,c,d)).reduce((e,f)=>e+f)}function getTypeDamage(a,b,d,c){var e=100*parseFloat(c[capitalize(a)+" Defense"]);a=parseFloat("physical"==a?c[capitalize(d)]:c[capitalize(a)]);return DAMAGE_FORMULA(b,e,a)}function capitalize(a){return a.charAt(0).toUpperCase()+a.slice(1)}
function sum(a,b){return a+b}function getAttackPower(a,b){var d={};attack_types.forEach(c=>d[c]=parseFloat(a["max_base_"+c+"_attack_power"])+getMaxBonusAttackPower(a,c,b));return d}function getMaxBonusAttackPower(a,b,d){return attack_sources.every(c=>meetsRequirement(a,b,d,c))?attack_sources.map(c=>getAttackPowerPerSource(a,b,d,c)).reduce((c,e)=>c+e):-.4*parseFloat(a["max_base_"+b+"_attack_power"])}
function meetsRequirement(a,b,d,c){return"str"==c?!a[b+"_"+c+"_element_scaling"]||d[c]>=(is_two_handing?Math.ceil(parseInt(a.required_str)/1.5):parseInt(a.required_str)):!a[b+"_"+c+"_element_scaling"]||d[c]>=parseInt(a["required_"+c])}
function getAttackPowerPerSource(a,b,d,c){if(!a[b+"_"+c+"_element_scaling"])return 0;var e=d[c];is_two_handing&&"str"==c&&(e*=1.5);d=parseFloat(a["max_base_"+b+"_attack_power"]);c=parseFloat(a["max_"+c+"_scaling"]);a=parseInt(a[b+"_damage_calculation_id"]);a=parseFloat(attribute_curves[a](e))/100;return d*c*a}function old_find_best_sword(){return old_find_best("Straight Sword",get_attack_stats(class_stats.vagabond),53)}
function old_find_best(a,b,d){var c=Array.from(weapons.values()).filter(k=>k.weapon_type==a);b=get_attribute_combinations(b,d);console.log("Comparing "+c.length*b.length+" weapon/stat combinations.");d=0;var e;for(e of c){var [f,g]=brute_solver(damage_objective,b.map(k=>({weapon:e,attrs:k})));print_damage_weapon_attributes(f,g);if(f>d){d=f;var h=g}}return[d,h.weapon,h.attrs]}
function get_attribute_combinations(a,b){for(var d=[],c=a.str;c<=Math.min(99,a.str+b);c++)for(var e=a.dex;e<=Math.min(99,a.dex+b);e++)for(var f=a["int"];f<=Math.min(99,a["int"]+b);f++)for(var g=a.fai;g<=Math.min(99,a.fai+b);g++)for(var h=a.arc;h<=Math.min(99,a.arc+b);h++)c+e+f+g+h==b+Object.values(a).reduce((k,n)=>k+n)&&d.push({str:c,dex:e,"int":f,fai:g,arc:h});return d};var weapons=new Map,bosses=new Map;fetch("data/weapons.json").then(a=>a.json()).then(a=>{var b,d;for([b,d]of Object.entries(a))weapons.set(b,d);var c=new Map;fetch("data/flat_attack_element_scaling_params.json").then(e=>e.json()).then(e=>{var f,g;for([f,g]of Object.entries(e))c.set(f,g);for(var h of weapons.values())for([f,g]of Object.entries(c.get(h.attack_element_scaling_id)))h[f]=g})});
fetch("data/boss_data.json").then(a=>a.json()).then(a=>{var b,d;for([b,d]of Object.entries(a))bosses.set(b,d);var c=new Map;fetch("data/difficulty_data.json").then(e=>e.json()).then(e=>{var f,g;for([f,g]of Object.entries(e))c.set(f,g);for(var h of bosses.values()){var k=h["SpEffect ID"];if(c.has(k))for([f,g]of Object.entries(c.get(k)))h[f]=g}for([k,h]of bosses.entries())e=document.createElement("option"),e.value=k,e.innerHTML=h.Name,document.getElementById("enemy").appendChild(e)})});
function enter_optimize_weapon_and_attributes(){document.getElementById("output").innerHTML="thinking...";var a={str:parseInt(document.getElementById("str").value),dex:parseInt(document.getElementById("dex").value),"int":parseInt(document.getElementById("int").value),fai:parseInt(document.getElementById("fai").value),arc:parseInt(document.getElementById("arc").value)},b=parseInt(document.getElementById("floatingPoints").value),d=[],c=Array.from(document.getElementById("weaponTypes").options),e=c.filter(f=>
f.selected).map(f=>f.value).map(f=>g=>g.weapon_type==f);e.length&&!c.every(f=>f.selected)&&d.push(e.reduce(disjunction));c=Array.from(document.getElementById("affinities"));e=c.filter(f=>f.selected).map(f=>f.value).map(f=>g=>g.affinity==f);e.length&&!c.every(f=>f.selected)&&d.push(e.reduce(disjunction));is_two_handing=document.getElementById("isTwoHanding").checked;must_have_required_attributes=document.getElementById("meetsAttributeRequirements").checked;enemy=bosses.get(document.getElementById("enemy").value);
document.getElementById("isDualWieldable").checked&&d.push(f=>f.dual_wieldable);a=optimize_weapon_and_attributes(a,b,d);console.log("done");document.getElementById("output").innerHTML=JSON.stringify(a,null,2)}function load_class(){var a,b;for([a,b]of Object.entries(get_attack_stats(class_stats[document.getElementById("classes").value])))document.getElementById(a).value=b}var disjunction=(a,b)=>d=>a(d)||b(d);
